"""
This script will insert a new rules to your existing l3 ACL for all networks within a single Meraki Organision to the backup folder.

To run this script you will need:
1. A Read Only or Read Write API Key
2. To know your unique Meraki Organisation ID
"""

import os
import random
import meraki
import sys
import json


def merakiError(e):
    """
    Function to print the error generated by Meraki's SDK during any API call made to via the SDK with a try logic attached.
    Args:
            e (String): Error message generated and formatted by the Meraki SDK.
    """
    print(f"Meraki API error: {e}")


def pythonError(e):
    """
    Function to print the error generated by Python during any API calls made with a try logic attached.
    Args:
            e (String): Python Error message.
    """
    print(f"Python API error: {e}")


def setupScript():
    """
    Function to setup the script,  including input of required variables and creating the backup folder structure.

    In an attempt to not overwrite existing backups if the folder alredy exists, it will add a two digit number to the end of the path.

    Returns:
        apiKey(String): API Key to authenticate against the Meraki API (RW or RO).
        orgId(String): Unique Org Id of the Meraki organisation that this script should run against.
        backupFolderpath(String): Folder path of where to save backup files.
    """
    apiKey = input("Please enter your Meraki API Key: ")
    orgId = input("Please enter your Meraki OrgId: ")
    backupFolderName = input(
        "Please enter the of the folder to save backups to: ")

    if os.path.exists(f"backup/{backupFolderName}") != True:
        os.mkdir(f"backup/{backupFolderName}")
        print(f"Creating folder: backup/{backupFolderName}")
        backupFolderpath = f"backup/{backupFolderName}"
    else:
        backupFolderNameRandom = f"{backupFolderName}_{random.randint(1, 99)}"
        os.mkdir(f"backup/{backupFolderNameRandom}")
        print(
            f"Path backup/{backupFolderName} already exists, creating path as backup/{backupFolderNameRandom}")
        backupFolderpath = f"backup/{backupFolderNameRandom}"

    return apiKey, orgId, backupFolderpath


def getMerakiNetworkList(orgId):
    """
    Function to query the Meraki API and provide a list of Meraki Networks which have appliance in their product type list.

    Args:
        orgId (String): Unique Org Id of the Meraki organisation that this script should run against.

    Returns:
        networkListFiltered (List): Filtered X of all Meraki Networks within the Organisation which have an appliance in their product type list.
    """

    networkList = []

    try:
        networkList = dashboard.organizations.getOrganizationNetworks(
            organizationId=orgId, total_pages="all")
    except meraki.APIError as e:
        merakiError(e)
        sys.exit(1)

    except Exception as e:
        pythonError(e)
        sys.exit(1)

    networkListFiltered = []

    for network in networkList:
        if "appliance" in network["productTypes"]:
            networkListFiltered.append(network)

    return networkListFiltered


def backupL3Acl(L3Acl, networkName, backupPath):
    """
    Function to take the exiting L3 ACL and back it up to a new JSON file.

    Args:
        L3Acl (List): Existing L3 ACL for the network which needs to be backed up.
        backupPath (String): Path for where to backup the configuration to, passed as a string.
    """

    with open(f"{backupPath}/{networkName}.json", "w") as outputfile:

        json.dump(L3Acl, outputfile, indent=4)


def getL3Acl(networkId):
    """
    Function to pull the existing L3 ACL for a network.

    Args:
        networkId (String): unique Network Id for the Network that the function will pull the L3 ACL for.

    Returns:
        List: List of the existing L3 ACL.
    """

    networkL3Acl = []

    try:
        networkL3Acl = dashboard.appliance.getNetworkApplianceFirewallL3FirewallRules(
            networkId=networkId)
    except meraki.APIError as e:
        merakiError(e)
        sys.exit(1)

    except Exception as e:
        pythonError(e)
        sys.exit(1)

    return networkL3Acl


def getnewRules():
    """
    Function to import the rules to be added to the existing ACL.

    Returns:
        newRules(List): List of the new rules to be added.
    """
    newRules = {}
    with open("newrules.json", "r") as inputfile:
        newRules = json.load(inputfile)

    return newRules


def createNewL3Acl(existingL3Acl, newL3Rules):
    """
    Function which will generate a new L3 ACL based on the existing L3 ACL and the new L3 Rules, it will also add a default Deny Any Any statement to the end.

    Args:
        existingL3Acl (List): Existing L3 ACL.
        newL3Rules (List): New rules to be added to the existing L3 ACL.

    Returns:
        updateL3Acl(Dict): New updated L3 ACL.
    """

    # Deny Any Any which will be added to the end of the new ACL which is generated.
    denyAnyAny = {
        "comment": "Deny_Any_Any",
        "policy": "Deny",
        "protocol": "Any",
        "srcPort": "Any",
        "srcCidr": "Any",
        "destPort": "Any",
        "destCidr": "Any",
    }

    updateL3Acl = []
    for rule in existingL3Acl["rules"]:
        if rule["policy"] == "deny" and rule["comment"] == "Deny_Any_Any":
            continue
        elif rule["comment"] == "Default rule":
            continue
        else:
            updateL3Acl.append(rule)

    for rule in newL3Rules["rules"]:
        updateL3Acl.append(rule)

    updateL3Acl.append(denyAnyAny)

    return updateL3Acl


def updateL3ACL(networkId, updatedl3AclRules):
    try:
        dashboard.appliance.updateNetworkApplianceFirewallL3FirewallRules(networkId=networkId,
                                                                          rules=updatedl3AclRules)
    except meraki.APIError as e:
        merakiError(e)
        sys.exit(1)

    except Exception as e:
        pythonError(e)
        sys.exit(1)


if "__main__" == __name__:

    apiKey, orgId, backupFolderPath = setupScript()

    dashboard = meraki.DashboardAPI(api_key=apiKey,
                                    print_console=False,
                                    log_path="logs",
                                    retry_4xx_error=True)

    # Getting the list of all Networks within the Meraki Org.
    merakiNetworkList = getMerakiNetworkList(orgId=orgId)

    # Getting the new rules set.
    newL3Rules = getnewRules()

    # For loop to go through each network returned from the getMerakiNetworkList function.
    for network in merakiNetworkList:

        if "fw_automation" in network["tags"]:
            # Getting the existing L3 ACL
            existingL3Acl = getL3Acl(networkId=network["id"])
            # Backup existing L3 ACL
            backupL3Acl(L3Acl=existingL3Acl,
                        networkName=network["name"],
                        backupPath=backupFolderPath)

            updatedL3Acl = createNewL3Acl(existingL3Acl=existingL3Acl,
                                          newL3Rules=newL3Rules)
            updateL3ACL(networkId=network["id"],
                        updatedl3AclRules=updatedL3Acl)
